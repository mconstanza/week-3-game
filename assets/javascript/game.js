// Overwatch Hangman Game



// Instantiate the wordlist variable and populate it with 
// pre-defined phrases.
var wordList = [

"Nerf this",
"It's high noon",
"Peanut butter",
"The cavalry's here",
"Fire in the hole",
"Here comes the apocalypse",
"Justice rains from above",
"Catch phrase",
"I can bench more than you",
"ryuu ga waga teki wo kurau"

]


// OBJECTS ////////////////////////////////////////////////////////////////////////////////////////////////

function Puzzle(wordlist) {
}


function Player(blanks) {

	// set starting guess to blank puzzle
	
}




// FUNCTIONS///////////////////////////////////////////////////////////////////////////////////////////////

// Prompt a player to input a letter
var playerInput = function() {
	var guess = prompt("Guess a letter.")
	return guess
}


// Check if a player's guess is valid
var guessValid = function (guess, playerGuesses) {
	
	var regex=/[^a-zA-Z]+$/;

	if (guess == null) {
		alert("You must input a letter.");
		return false

	}else if (guess.match(regex)) {
		alert("Guess must be a letter.");
		return false

	} else if (guess.length > 1) {
		alert("Only guess one letter at a time.");
		return false

	} else if (playerGuesses.indexOf(guess) > -1) {
		alert("You already guessed that letter!")
		return false

	}else if (guess.length < 1) {
		alert("You must input a letter.");
		return false

	}else{
		return true
	}
}

var guessCheck = function (guess, playerGuesses, incorrectGuesses, workingPuzzle, puzzleSolution) {

	if (checkArray(puzzleSolution, guess) == true) {
		// console.log("guess is valid")
		workingPuzzle = replaceInArray(workingPuzzle, guess, puzzleSolution)
	// console.log(workingPuzzle)
		playerGuesses.push(guess)
	}else if (checkArray(puzzleSolution, guess) == false){
		console.log("not in puzzle")
		playerGuesses.push(guess)
		incorrectGuesses.push(guess)
		console.log("incorrect guesses: " + incorrectGuesses)
	}else{
		// console.log("guess is invalid")	
	}
	console.log("Player Guesses: " + playerGuesses)	
	return [workingPuzzle, playerGuesses, incorrectGuesses]	
}


var extraSpaces = function(word) { //adds extra characters to all letters in a word's display for HTML
		var wordWithSpaces = ""
		for (letter in word) {
			wordWithSpaces += word[letter] + " "
		}
		return wordWithSpaces
}


// These functions check if the guess is in the solution and rewrite the workingPuzzle to account for correct answers

var checkArray = function(array, guess) {
	console.log("array: " + array)
	if (array.indexOf(guess) > -1) {
		return true
	}else{
		return false
	}
}

var stringToArray = function(string) {
	array = []
	for (char in string) {
		array.push(string[char])
	}
	return array
}

var replaceInArray = function(array, guess, puzzleSolution) {
	for (i in puzzleSolution) {
		if (guess == puzzleSolution[i]) {
			array[i] = guess;
		}else{
			continue
		}
	}return array
}

var arrayToString = function(array) {
	var string = ""
	for (i in array) {
		string += array[i];
	}
	return string
}


// Global guesses variable for debugging

guesses = []
// variable used to display word in HTML
puzzleDisplay = document.querySelector(".puzzle")

// Form class to listen to for taking input
guessInput = document.querySelector("#input")

gameOver= false;



// Methods
getWord = function (wordList) {
	var word = Math.floor((Math.random() * wordList.length));
	return wordList[word]
}
// Creates a blank puzzle with the solution generated by getWord
getBlanks = function(word) {
	var blanks = ""
	for (letter in word) {
		//console.log(letter)
		if (word[letter] == ' ') {
			//console.log(letter)
			blanks += '\xa0'
			//console.log("BLANK SPACE")
		}else if (word[letter] == '.'){
			blanks +=".";
		}else if (word[letter] == ',') {
			blanks += ',';
		}else if (word[letter] == "'") {
			blanks += "'";
		}else {
			blanks += "_";
		}
	}
	return stringToArray(blanks) // convert the string into an array for easy comparison
}

// Properties
solution = stringToArray(getWord(wordList));
blanks = getBlanks(solution);
blanksWithSpaces = extraSpaces(blanks)
workingPuzzle = blanks;
guesses = [];
incorrectGuesses = [];





// Figure out if the game should end
winCheck = function(workingPuzzle, incorrectGuesses, puzzleSolution) {
	console.log("working puzzle, puzzle solution: " + workingPuzzle + " "
	+ solution)		
	//console.log(workingPuzzle.localeCompare(puzzleSolution))
	// console.log("Working array: " + stringToArray(workingPuzzle))
	// console.log("solution array: " + stringToArray(puzzleSolution))

	if (workingPuzzle.indexOf('_') == -1) {
	// if(workingPuzzle == puzzleSolution){
		gameOver = true
		alert("You win! Great job!")

	}else if (incorrectGuesses.length >= 5) {
		gameOver = true
		alert("Ouch. You lose.")

	}else {
		//console.log("conditions aren't working for gameover")
		gameOver = false
	}
	return gameOver
}	

// Main game OBJECT

function Game(wordlist) {
	// Create Puzzle

	
	
	// Main Loop
	this.play = function() {

		//while (this.gameOver == false) {
		//console.log("blanks: " + this.puzzle.blanks)

		console.log("Working puzzle at loop start: " + workingPuzzle)
		console.log("player: " + guesses)
		console.log("workingpuzzle with spaces: " + extraSpaces(workingPuzzle))
	    //puzzleDisplay.innerHTML = extraSpaces(workingPuzzle)
	    

	    document.querySelector(".puzzle").innerHTML = extraSpaces(workingPuzzle)
		window.addEventListener("keypress", function(event){
			
			// accept input
			guess = String.fromCharCode(event.charCode)
			console.log("Guess: " + guess)

				// validate input
			if(guessValid(guess, guesses)) {
				console.log("validating guess: " + guess)
			
			returnArray = guessCheck(guess, guesses, incorrectGuesses, 
			workingPuzzle, solution);
			workingPuzzle = returnArray[0];
			console.log("working puzzle after return: " + workingPuzzle)
			guesses = returnArray[1];
			incorrectGuesses = returnArray[2];
			document.querySelector(".puzzle").innerHTML = extraSpaces(workingPuzzle)
		    }else {
			}

			gameOver = winCheck(workingPuzzle, incorrectGuesses, 
			solution);
		});


			
			//display working puzzle
			//document.querySelector(".puzzle").innerHTML = arrayToString(this.player.workingPuzzle);
	}
}

// This begins a new game
var startGame = function() {
	var game = new Game(wordList);
	game.play();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////






